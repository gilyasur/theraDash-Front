{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport getPatient from './patientAPI';\nimport { selectToken } from '../login/loginSlice';\nconst initialState = {\n  patients: [],\n  status: 'idle',\n  error: null\n};\nexport const fetchPatients = createAsyncThunk('patients/fetchPatients', async (_, {\n  getState\n}) => {\n  const token = selectToken(getState());\n  console.log();\n  if (!token) {\n    throw new Error('Token not found');\n  }\n  try {\n    const response = await getPatient(token);\n    return response;\n  } catch (error) {\n    console.error('Error in fetchPatients:', error);\n    throw error;\n  }\n});\nconst patientSlice = createSlice({\n  name: 'patient',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchPatients.pending, state => {\n      console.log('fetchPatients.pending');\n      state.status = 'loading';\n    }).addCase(fetchPatients.fulfilled, (state, action) => {\n      console.log('fetchPatients.fulfilled');\n      state.status = 'succeeded';\n      state.patients = action.payload.map(patient => ({\n        ...patient,\n        therapist: Number(patient.therapist)\n      }));\n    }).addCase(fetchPatients.rejected, (state, action) => {\n      console.log('fetchPatients.rejected');\n      state.status = 'failed';\n      state.error = action.payload;\n    });\n  }\n});\nexport const selectPatients = state => state.patient.patients;\nexport const selectPatientsStatus = state => state.patient.status;\nexport const selectPatientsError = state => state.patient.error;\nexport default patientSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","getPatient","selectToken","initialState","patients","status","error","fetchPatients","_","getState","token","console","log","Error","response","patientSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","map","patient","therapist","Number","rejected","selectPatients","selectPatientsStatus","selectPatientsError","reducer"],"sources":["/Users/gilyasur/Documents/My Projects/dashBoard /Front/my-app/src/features/patients/patientSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport getPatient from './patientAPI';\nimport { selectToken } from '../login/loginSlice';\n\nexport interface Ipatient {\n  therapist: number;\n  first_name: string;\n  last_name: string;\n  email: string;\n  phone_number: string;\n  date_of_birth: string;\n  address: string;\n}\n\nexport interface IpatientState {\n  patients: Ipatient[];\n  status: 'idle' | 'loading' | 'succeeded' | 'failed';\n  error: string | null;\n}\n\nconst initialState: IpatientState = {\n  patients: [],\n  status: 'idle',\n  error: null,\n};\n\nexport const fetchPatients = createAsyncThunk<Ipatient[], void>(\n  'patients/fetchPatients',\n  async (_, { getState }) => {\n    const token = selectToken(getState() as RootState);\n    console.log();\n    \n    if (!token) {\n      throw new Error('Token not found');\n    }\n\n    try {\n      const response = await getPatient(token);\n      return response;\n    } catch (error) {\n      console.error('Error in fetchPatients:', error);\n      throw error;\n    }\n  }\n);\n\nconst patientSlice = createSlice({\n  name: 'patient',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchPatients.pending, (state) => {\n        console.log('fetchPatients.pending');\n        state.status = 'loading';\n      })\n      .addCase(fetchPatients.fulfilled, (state, action) => {\n        console.log('fetchPatients.fulfilled');\n        state.status = 'succeeded';\n        state.patients = action.payload.map((patient) => ({\n          ...patient,\n          therapist: Number(patient.therapist),\n        }));\n      })\n      .addCase(fetchPatients.rejected, (state, action) => {\n        console.log('fetchPatients.rejected');\n        state.status = 'failed';\n        state.error = action.payload as string;\n      });\n  },\n});\n\nexport const selectPatients = (state: RootState) => state.patient.patients;\nexport const selectPatientsStatus = (state: RootState) => state.patient.status;\nexport const selectPatientsError = (state: RootState) => state.patient.error;\n\nexport default patientSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAEhE,OAAOC,UAAU,MAAM,cAAc;AACrC,SAASC,WAAW,QAAQ,qBAAqB;AAkBjD,MAAMC,YAA2B,GAAG;EAClCC,QAAQ,EAAE,EAAE;EACZC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE;AACT,CAAC;AAED,OAAO,MAAMC,aAAa,GAAGR,gBAAgB,CAC3C,wBAAwB,EACxB,OAAOS,CAAC,EAAE;EAAEC;AAAS,CAAC,KAAK;EACzB,MAAMC,KAAK,GAAGR,WAAW,CAACO,QAAQ,CAAC,CAAc,CAAC;EAClDE,OAAO,CAACC,GAAG,CAAC,CAAC;EAEb,IAAI,CAACF,KAAK,EAAE;IACV,MAAM,IAAIG,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMb,UAAU,CAACS,KAAK,CAAC;IACxC,OAAOI,QAAQ;EACjB,CAAC,CAAC,OAAOR,KAAK,EAAE;IACdK,OAAO,CAACL,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CACF,CAAC;AAED,MAAMS,YAAY,GAAGf,WAAW,CAAC;EAC/BgB,IAAI,EAAE,SAAS;EACfb,YAAY;EACZc,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACb,aAAa,CAACc,OAAO,EAAGC,KAAK,IAAK;MACzCX,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;MACpCU,KAAK,CAACjB,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDe,OAAO,CAACb,aAAa,CAACgB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACnDb,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MACtCU,KAAK,CAACjB,MAAM,GAAG,WAAW;MAC1BiB,KAAK,CAAClB,QAAQ,GAAGoB,MAAM,CAACC,OAAO,CAACC,GAAG,CAAEC,OAAO,KAAM;QAChD,GAAGA,OAAO;QACVC,SAAS,EAAEC,MAAM,CAACF,OAAO,CAACC,SAAS;MACrC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CACDR,OAAO,CAACb,aAAa,CAACuB,QAAQ,EAAE,CAACR,KAAK,EAAEE,MAAM,KAAK;MAClDb,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MACrCU,KAAK,CAACjB,MAAM,GAAG,QAAQ;MACvBiB,KAAK,CAAChB,KAAK,GAAGkB,MAAM,CAACC,OAAiB;IACxC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAMM,cAAc,GAAIT,KAAgB,IAAKA,KAAK,CAACK,OAAO,CAACvB,QAAQ;AAC1E,OAAO,MAAM4B,oBAAoB,GAAIV,KAAgB,IAAKA,KAAK,CAACK,OAAO,CAACtB,MAAM;AAC9E,OAAO,MAAM4B,mBAAmB,GAAIX,KAAgB,IAAKA,KAAK,CAACK,OAAO,CAACrB,KAAK;AAE5E,eAAeS,YAAY,CAACmB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}