{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { login } from './loginAPI';\nconst initialState = {\n  username: '',\n  password: '',\n  status: 'idle',\n  token: '',\n  logged: false,\n  // Initialize additional fields\n  firstName: undefined,\n  lastName: undefined\n};\nfunction parseJwt(token) {\n  var base64Url = token.split('.')[1];\n  var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n  var jsonPayload = decodeURIComponent(window.atob(base64).split('').map(function (c) {\n    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join(''));\n  return JSON.parse(jsonPayload);\n}\nexport const loginAsync = createAsyncThunk('login/login', async credentials => {\n  const response = await login(credentials);\n  return response.data;\n});\nexport const loginSlice = createSlice({\n  name: 'login',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(loginAsync.fulfilled, (state, action) => {\n      // Assuming your server response includes custom claims like 'first_name' and 'last_name'\n      state.token = action.payload.access;\n      state.logged = true;\n      state.status = 'loading';\n      state.firstName = action.payload.first_name;\n      state.lastName = action.payload.last_name;\n\n      // Store the token and additional data in sessionStorage\n      sessionStorage.setItem('token', JSON.stringify(state.token));\n      sessionStorage.setItem('firstName', JSON.stringify(state.firstName));\n      sessionStorage.setItem('lastName', JSON.stringify(state.lastName));\n    }).addCase(loginAsync.rejected, (state, action) => {\n      // Assuming you have an API call rejection for an expired token scenario\n      if (action.error.message === 'Token expired') {\n        state.token = ''; // Clear the expired token\n        state.logged = false; // Set logged to false\n        state.status = 'idle';\n        state.firstName = undefined; // Clear the additional data\n        state.lastName = undefined;\n        sessionStorage.removeItem('token'); // Remove the token from sessionStorage\n        sessionStorage.removeItem('firstName');\n        sessionStorage.removeItem('lastName');\n      }\n    });\n  }\n});\nexport const selectstatus = state => state.login.status;\nexport const selectLogged = state => state.login.logged;\nexport const selectToken = state => state.login.token;\nexport const selectFirstName = state => state.login.firstName;\nexport const selectLastName = state => state.login.lastName;\nexport default loginSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","login","initialState","username","password","status","token","logged","firstName","undefined","lastName","parseJwt","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","window","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","loginAsync","credentials","response","data","loginSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","access","first_name","last_name","sessionStorage","setItem","stringify","rejected","error","message","removeItem","selectstatus","selectLogged","selectToken","selectFirstName","selectLastName","reducer"],"sources":["/Users/gilyasur/Documents/My Projects/dashBoard /Front/my-app/src/features/login/loginSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport { login } from './loginAPI';\n\nexport interface loginState {\n  username: string;\n  password: string;\n  status: 'idle' | 'loading' | 'failed';\n  token: string;\n  logged: boolean;\n  // Add additional fields for custom claims\n  firstName?: string;\n  lastName?: string;\n}\n\nconst initialState: loginState = {\n  username: '',\n  password: '',\n  status: 'idle',\n  token: '',\n  logged: false,\n  // Initialize additional fields\n  firstName: undefined,\n  lastName: undefined,\n};\n\nfunction parseJwt (token) {\n  var base64Url = token.split('.')[1];\n  var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n  var jsonPayload = decodeURIComponent(window.atob(base64).split('').map(function(c) {\n      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join(''));\n\n  return JSON.parse(jsonPayload);\n}\n\nexport const loginAsync = createAsyncThunk(\n  'login/login',\n  async (credentials: { username: string; password: string }) => {\n    const response = await login(credentials);\n    return response.data;\n  }\n);\n\nexport const loginSlice = createSlice({\n  name: 'login',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(loginAsync.fulfilled, (state, action) => {\n        // Assuming your server response includes custom claims like 'first_name' and 'last_name'\n        state.token = action.payload.access;\n        state.logged = true;\n        state.status = 'loading';\n        state.firstName = action.payload.first_name;\n        state.lastName = action.payload.last_name;\n\n        // Store the token and additional data in sessionStorage\n        sessionStorage.setItem('token', JSON.stringify(state.token));\n        sessionStorage.setItem('firstName', JSON.stringify(state.firstName));\n        sessionStorage.setItem('lastName', JSON.stringify(state.lastName));\n      })\n      .addCase(loginAsync.rejected, (state, action) => {\n        // Assuming you have an API call rejection for an expired token scenario\n        if (action.error.message === 'Token expired') {\n          state.token = ''; // Clear the expired token\n          state.logged = false; // Set logged to false\n          state.status = 'idle';\n          state.firstName = undefined; // Clear the additional data\n          state.lastName = undefined;\n          sessionStorage.removeItem('token'); // Remove the token from sessionStorage\n          sessionStorage.removeItem('firstName');\n          sessionStorage.removeItem('lastName');\n        }\n      });\n  },\n});\n\nexport const selectstatus = (state: RootState) => state.login.status;\nexport const selectLogged = (state: RootState) => state.login.logged;\nexport const selectToken = (state: RootState) => state.login.token;\nexport const selectFirstName = (state: RootState) => state.login.firstName;\nexport const selectLastName = (state: RootState) => state.login.lastName;\n\nexport default loginSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}