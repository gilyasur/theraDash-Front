{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { login } from './loginAPI';\nimport { jwtDecode } from \"jwt-decode\";\nconst initialState = {\n  username: '',\n  password: '',\n  status: 'idle',\n  token: '',\n  logged: false,\n  userfirstName: undefined,\n  userlastName: undefined\n};\n\n// Add a new async thunk to check sessionStorage for the token\nexport const checkSessionToken = createAsyncThunk('login/checkSessionToken', async () => {\n  const storedToken = sessionStorage.getItem('token');\n  if (storedToken) {\n    return storedToken;\n  }\n  throw new Error('No stored token');\n});\nexport const loginAsync = createAsyncThunk('login/login', async (credentials, {\n  dispatch\n}) => {\n  try {\n    // Check for the session token first\n    const sessionToken = await dispatch(checkSessionToken());\n\n    // If session token is available, use it\n    const decodedSessionToken = jwtDecode(sessionToken);\n    dispatch(loginSlice.actions.loginFulfilled({\n      access: sessionToken,\n      first_name: decodedSessionToken.first_name,\n      last_name: decodedSessionToken.last_name\n    }));\n  } catch (error) {\n    // If no session token, make a new request to the server\n    const response = await login(credentials);\n    return response.data;\n  }\n});\nexport const loginSlice = createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    loginFulfilled: (state, action) => {\n      state.token = action.payload.access;\n      state.logged = true;\n      state.status = 'loading';\n      state.userfirstName = action.payload.first_name;\n      state.userlastName = action.payload.last_name;\n\n      // Store the token and additional data in sessionStorage\n      sessionStorage.setItem('token', JSON.stringify(state.token));\n      sessionStorage.setItem('firstName', JSON.stringify(state.userfirstName));\n      sessionStorage.setItem('lastName', JSON.stringify(state.userlastName));\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(loginAsync.fulfilled, (state, action) => {\n      // Assuming your server response includes custom claims like 'first_name' and 'last_name'\n      dispatch(loginSlice.actions.loginFulfilled(action.payload));\n    }).addCase(loginAsync.rejected, (state, action) => {\n      // Assuming you have an API call rejection for an expired token scenario\n      if (action.error.message === 'Token expired') {\n        state.token = ''; // Clear the expired token\n        state.logged = false; // Set logged to false\n        state.status = 'idle';\n        state.userfirstName = undefined; // Clear the additional data\n        state.userlastName = undefined;\n        sessionStorage.removeItem('token'); // Remove the token from sessionStorage\n        sessionStorage.removeItem('firstName');\n        sessionStorage.removeItem('lastName');\n      }\n    });\n  }\n});\nexport const selectstatus = state => state.login.status;\nexport const selectLogged = state => state.login.logged;\nexport const selectToken = state => state.login.token;\nexport const selectFirstName = state => state.login.userfirstName;\nexport const selectLastName = state => state.login.userlastName;\nexport default loginSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","login","jwtDecode","initialState","username","password","status","token","logged","userfirstName","undefined","userlastName","checkSessionToken","storedToken","sessionStorage","getItem","Error","loginAsync","credentials","dispatch","sessionToken","decodedSessionToken","loginSlice","actions","loginFulfilled","access","first_name","last_name","error","response","data","name","reducers","state","action","payload","setItem","JSON","stringify","extraReducers","builder","addCase","fulfilled","rejected","message","removeItem","selectstatus","selectLogged","selectToken","selectFirstName","selectLastName","reducer"],"sources":["/Users/gilyasur/Documents/My Projects/dashBoard /Front/my-app/src/features/Presite/login/loginSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '../../../app/store';\nimport { login } from './loginAPI';\nimport { jwtDecode } from \"jwt-decode\";\n\nexport interface loginState {\n  username: string;\n  password: string;\n  status: 'idle' | 'loading' | 'failed';\n  token: string;\n  logged: boolean;\n  userfirstName?: string;\n  userlastName?: string;\n}\n\nconst initialState: loginState = {\n  username: '',\n  password: '',\n  status: 'idle',\n  token: '',\n  logged: false,\n  userfirstName: undefined,\n  userlastName: undefined,\n};\n\n// Add a new async thunk to check sessionStorage for the token\nexport const checkSessionToken:string = createAsyncThunk(\n  'login/checkSessionToken',\n  async () => {\n    const storedToken = sessionStorage.getItem('token');\n    if (storedToken) {\n      return storedToken;\n    }\n    throw new Error('No stored token');\n  }\n);\n\nexport const loginAsync = createAsyncThunk(\n  'login/login',\n  async (credentials: { username: string; password: string }, { dispatch }) => {\n    try {\n      // Check for the session token first\n      const sessionToken = await dispatch(checkSessionToken());\n      \n      // If session token is available, use it\n      const decodedSessionToken: any = jwtDecode(sessionToken);\n      dispatch(loginSlice.actions.loginFulfilled({\n        access: sessionToken,\n        first_name: decodedSessionToken.first_name,\n        last_name: decodedSessionToken.last_name,\n      }));\n    } catch (error) {\n      // If no session token, make a new request to the server\n      const response = await login(credentials);\n      return response.data;\n    }\n  }\n);\n\nexport const loginSlice = createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    loginFulfilled: (state, action) => {\n      state.token = action.payload.access;\n      state.logged = true;\n      state.status = 'loading';\n      state.userfirstName = action.payload.first_name;\n      state.userlastName = action.payload.last_name;\n\n      // Store the token and additional data in sessionStorage\n      sessionStorage.setItem('token', JSON.stringify(state.token));\n      sessionStorage.setItem('firstName', JSON.stringify(state.userfirstName));\n      sessionStorage.setItem('lastName', JSON.stringify(state.userlastName));\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(loginAsync.fulfilled, (state, action) => {\n        // Assuming your server response includes custom claims like 'first_name' and 'last_name'\n        dispatch(loginSlice.actions.loginFulfilled(action.payload));\n      })\n      .addCase(loginAsync.rejected, (state, action) => {\n        // Assuming you have an API call rejection for an expired token scenario\n        if (action.error.message === 'Token expired') {\n          state.token = ''; // Clear the expired token\n          state.logged = false; // Set logged to false\n          state.status = 'idle';\n          state.userfirstName = undefined; // Clear the additional data\n          state.userlastName = undefined;\n          sessionStorage.removeItem('token'); // Remove the token from sessionStorage\n          sessionStorage.removeItem('firstName');\n          sessionStorage.removeItem('lastName');\n        }\n      });\n  },\n});\n\nexport const selectstatus = (state: RootState) => state.login.status;\nexport const selectLogged = (state: RootState) => state.login.logged;\nexport const selectToken = (state: RootState) => state.login.token;\nexport const selectFirstName = (state: RootState) => state.login.userfirstName;\nexport const selectLastName = (state: RootState) => state.login.userlastName;\n\nexport default loginSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}