{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport getAppointments from './appointmentAPI ';\nconst initialState = {\n  appointments: [],\n  status: 'idle',\n  error: null\n};\n\n// const token = sessionStorage.getItem('token');\n\nexport const fetchAppointments = createAsyncThunk(\"appointments/fetchAppointments\", async token => {\n  if (!token) {\n    throw new Error(\"Token not found\");\n  }\n  try {\n    const response = await getAppointments(token);\n    return response; // Return the array directly\n  } catch (error) {\n    console.log(\"error in fetch Appointments\", error);\n    throw error;\n  }\n});\nconst appointmentsSlice = createSlice({\n  name: 'appointments',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchAppointments.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchAppointments.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.appointments = action.payload; // Corrected this line\n    }).addCase(fetchAppointments.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    });\n  }\n});\nexport const selectAppointments = state => state.appointment.appointments;\nexport const selectAppointmentsStatus = state => state.appointment.status;\nexport const selectAppointmentsError = state => state.appointment.error;\nexport default appointmentsSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","getAppointments","initialState","appointments","status","error","fetchAppointments","token","Error","response","console","log","appointmentsSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","selectAppointments","appointment","selectAppointmentsStatus","selectAppointmentsError","reducer"],"sources":["/Users/gilyasur/Documents/My Projects/dashBoard /Front/my-app/src/features/Appointment/appointmentSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport getAppointments from './appointmentAPI ';\nimport { selectToken } from '../login/loginSlice';\n\n\n\ninterface IAppointment {\n  id: number;\n  recurring_frequency: string;\n  day_of_week?: string | null;\n  time_of_day: string;\n  location?: string | null;\n  notes?: string | null;\n  created_at: string;\n  updated_at: string;\n  therapist: {\n    username: string;\n  };\n  patient: {\n    first_name: string;\n    last_name : string;\n  };\n}\n\nexport interface IAppointmentState {\n  appointments: IAppointment[];\n  status: 'idle' | 'loading' | 'succeeded' | 'failed';\n  error: string | null;\n}\n\nconst initialState: IAppointmentState = {\n  appointments: [],\n  status: 'idle',\n  error: null,\n};\n\n\n// const token = sessionStorage.getItem('token');\n\nexport const fetchAppointments = createAsyncThunk<IAppointment[], void>(\n  \"appointments/fetchAppointments\",\n  async (token) => {    \n    if (!token) {\n      throw new Error(\"Token not found\");\n    }\n    try{\n\n    const response = (await getAppointments(token))\n    return response; // Return the array directly\n  }catch (error) {\n    console.log(\"error in fetch Appointments\", error);\n    throw error\n    \n  }\n}\n\n);\n\n\n\nconst appointmentsSlice = createSlice({\n  name: 'appointments',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchAppointments.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchAppointments.fulfilled, (state, action) => {\n\n        state.status = 'succeeded';\n        state.appointments = action.payload; // Corrected this line\n      })\n      .addCase(fetchAppointments.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload as string;\n      });\n  },\n});\n\nexport const selectAppointments = (state: RootState) => state.appointment.appointments;\nexport const selectAppointmentsStatus = (state: RootState) => state.appointment.status;\nexport const selectAppointmentsError = (state: RootState) => state.appointment.error;\n\n\nexport default appointmentsSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAEhE,OAAOC,eAAe,MAAM,mBAAmB;AA6B/C,MAAMC,YAA+B,GAAG;EACtCC,YAAY,EAAE,EAAE;EAChBC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE;AACT,CAAC;;AAGD;;AAEA,OAAO,MAAMC,iBAAiB,GAAGP,gBAAgB,CAC/C,gCAAgC,EAChC,MAAOQ,KAAK,IAAK;EACf,IAAI,CAACA,KAAK,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;EACpC;EACA,IAAG;IAEH,MAAMC,QAAQ,GAAI,MAAMR,eAAe,CAACM,KAAK,CAAE;IAC/C,OAAOE,QAAQ,CAAC,CAAC;EACnB,CAAC,QAAOJ,KAAK,EAAE;IACbK,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEN,KAAK,CAAC;IACjD,MAAMA,KAAK;EAEb;AACF,CAEA,CAAC;AAID,MAAMO,iBAAiB,GAAGZ,WAAW,CAAC;EACpCa,IAAI,EAAE,cAAc;EACpBX,YAAY;EACZY,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACX,iBAAiB,CAACY,OAAO,EAAGC,KAAK,IAAK;MAC7CA,KAAK,CAACf,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDa,OAAO,CAACX,iBAAiB,CAACc,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAEvDF,KAAK,CAACf,MAAM,GAAG,WAAW;MAC1Be,KAAK,CAAChB,YAAY,GAAGkB,MAAM,CAACC,OAAO,CAAC,CAAC;IACvC,CAAC,CAAC,CACDL,OAAO,CAACX,iBAAiB,CAACiB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACtDF,KAAK,CAACf,MAAM,GAAG,QAAQ;MACvBe,KAAK,CAACd,KAAK,GAAGgB,MAAM,CAACC,OAAiB;IACxC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAME,kBAAkB,GAAIL,KAAgB,IAAKA,KAAK,CAACM,WAAW,CAACtB,YAAY;AACtF,OAAO,MAAMuB,wBAAwB,GAAIP,KAAgB,IAAKA,KAAK,CAACM,WAAW,CAACrB,MAAM;AACtF,OAAO,MAAMuB,uBAAuB,GAAIR,KAAgB,IAAKA,KAAK,CAACM,WAAW,CAACpB,KAAK;AAGpF,eAAeO,iBAAiB,CAACgB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}