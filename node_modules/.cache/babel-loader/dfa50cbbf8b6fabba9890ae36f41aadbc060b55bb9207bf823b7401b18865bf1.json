{"ast":null,"code":"import axios from \"axios\";\nexport function login(credentials) {\n  const MY_SERVER = \"http://127.0.0.1:8000/login/\";\n  return axios.post(MY_SERVER, credentials).then(response => {\n    // Assuming the server returns the access token in the response.data.token\n    const accessToken = response.data.token;\n\n    // Decode the access token if needed (assuming it's a JWT token)\n    const decodedToken = decodeAccessToken(accessToken);\n\n    // Send the decoded token as extra data in the payload\n    const payload = {\n      credentials,\n      decodedToken\n    };\n    return Promise.resolve(payload);\n  }).catch(error => {\n    // Handle login error\n    return Promise.reject(error);\n  });\n}\n\n// Function to decode the access token (assuming it's a JWT token)\nfunction decodeAccessToken(accessToken) {\n  // You'll need to use a library or implement your decoding logic here\n  // For example, using the `jsonwebtoken` library\n  // Note: Make sure to install the library first by running: `npm install jsonwebtoken`\n  // import jwt from 'jsonwebtoken';\n  // const decodedToken = jwt.decode(accessToken);\n  // return decodedToken;\n\n  // This is a placeholder, replace it with the actual decoding logic\n  return {\n    placeholderDecodedData: 'decodedTokenData'\n  };\n}","map":{"version":3,"names":["axios","login","credentials","MY_SERVER","post","then","response","accessToken","data","token","decodedToken","decodeAccessToken","payload","Promise","resolve","catch","error","reject","placeholderDecodedData"],"sources":["/Users/gilyasur/Documents/My Projects/dashBoard /Front/my-app/src/features/login/loginAPI.ts"],"sourcesContent":["import axios from \"axios\";\n\nexport function login(credentials: { username: string; password: string }) {\n  const MY_SERVER =\"http://127.0.0.1:8000/login/\";\n\n  return axios.post(MY_SERVER, credentials)\n    .then(response => {\n      // Assuming the server returns the access token in the response.data.token\n      const accessToken = response.data.token;\n\n      // Decode the access token if needed (assuming it's a JWT token)\n      const decodedToken = decodeAccessToken(accessToken);\n\n      // Send the decoded token as extra data in the payload\n      const payload = {\n        credentials,\n        decodedToken,\n      };\n\n      return Promise.resolve(payload);\n    })\n    .catch(error => {\n      // Handle login error\n      return Promise.reject(error);\n    });\n}\n\n// Function to decode the access token (assuming it's a JWT token)\nfunction decodeAccessToken(accessToken: string) {\n  // You'll need to use a library or implement your decoding logic here\n  // For example, using the `jsonwebtoken` library\n  // Note: Make sure to install the library first by running: `npm install jsonwebtoken`\n  // import jwt from 'jsonwebtoken';\n  // const decodedToken = jwt.decode(accessToken);\n  // return decodedToken;\n\n  // This is a placeholder, replace it with the actual decoding logic\n  return { placeholderDecodedData: 'decodedTokenData' };\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,SAASC,KAAKA,CAACC,WAAmD,EAAE;EACzE,MAAMC,SAAS,GAAE,8BAA8B;EAE/C,OAAOH,KAAK,CAACI,IAAI,CAACD,SAAS,EAAED,WAAW,CAAC,CACtCG,IAAI,CAACC,QAAQ,IAAI;IAChB;IACA,MAAMC,WAAW,GAAGD,QAAQ,CAACE,IAAI,CAACC,KAAK;;IAEvC;IACA,MAAMC,YAAY,GAAGC,iBAAiB,CAACJ,WAAW,CAAC;;IAEnD;IACA,MAAMK,OAAO,GAAG;MACdV,WAAW;MACXQ;IACF,CAAC;IAED,OAAOG,OAAO,CAACC,OAAO,CAACF,OAAO,CAAC;EACjC,CAAC,CAAC,CACDG,KAAK,CAACC,KAAK,IAAI;IACd;IACA,OAAOH,OAAO,CAACI,MAAM,CAACD,KAAK,CAAC;EAC9B,CAAC,CAAC;AACN;;AAEA;AACA,SAASL,iBAAiBA,CAACJ,WAAmB,EAAE;EAC9C;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA,OAAO;IAAEW,sBAAsB,EAAE;EAAmB,CAAC;AACvD"},"metadata":{},"sourceType":"module","externalDependencies":[]}