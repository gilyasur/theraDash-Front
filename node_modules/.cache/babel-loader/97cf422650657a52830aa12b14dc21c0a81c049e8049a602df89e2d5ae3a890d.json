{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport getPatient from './patientAPI';\nimport { selectToken } from '../login/loginSlice';\nconst initialState = {\n  patients: [],\n  status: 'idle',\n  error: null\n};\nexport const fetchPatients = createAsyncThunk(\"patient/fetchPatients\", async (_, {\n  getState\n}) => {\n  const token = selectToken(getState());\n  if (!token) {\n    throw new Error(\"Token not found\");\n  }\n  const response = await getPatient(token);\n  return response; // Return the array directly\n});\nconst patientSlice = createSlice({\n  name: 'patient',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchPatients.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchPatients.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.patients = action.payload; // Corrected this line\n    }).addCase(fetchPatients.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    });\n  }\n});\nexport const selectPatients = state => state.patient.patients;\nexport const selectPatientsStatus = state => state.patient.status;\nexport const selectPatientsError = state => state.patient.error;\nexport default patientSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","getPatient","selectToken","initialState","patients","status","error","fetchPatients","_","getState","token","Error","response","patientSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","selectPatients","patient","selectPatientsStatus","selectPatientsError","reducer"],"sources":["/Users/gilyasur/Documents/My Projects/dashBoard /Front/my-app/src/features/patients/patientSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport getPatient from './patientAPI';\nimport { selectToken } from '../login/loginSlice';\n\n\n\nexport interface Ipatient {\n  therapist : string;\n  first_name:string;\n  last_name : string;\n  email: string;\n  phone_number: string;\n  date_of_birth: string;\n  address: string;\n  \n\n  \n  \n}\nexport interface IpatientState {\n  patients: Ipatient[];\n  status: 'idle' | 'loading' | 'succeeded' | 'failed';\n  error: string | null;\n  \n\n  \n  \n}\nconst initialState: IpatientState = {\n  patients: [],\n  status: 'idle',\n  error: null,\n};\n\nexport const fetchPatients = createAsyncThunk<Ipatient[], void>(\n  \"patient/fetchPatients\",\n  async (_, { getState }) => {\n    const token = selectToken(getState() as RootState);\n    if (!token) {\n      throw new Error(\"Token not found\");\n    }\n\n    const response = (await getPatient(token)) as Ipatient[];\n    return response; // Return the array directly\n  }\n);\n\n\nconst patientSlice = createSlice({\n  name: 'patient',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchPatients.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchPatients.fulfilled, (state, action) => {\n\n        state.status = 'succeeded';\n        state.patients = action.payload; // Corrected this line\n      })\n      .addCase(fetchPatients.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload as string;\n      });\n  },\n});\n\nexport const selectPatients = (state: RootState) => state.patient.patients;\nexport const selectPatientsStatus = (state: RootState) => state.patient.status;\nexport const selectPatientsError = (state: RootState) => state.patient.error;\n\n\nexport default patientSlice.reducer;"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAEhE,OAAOC,UAAU,MAAM,cAAc;AACrC,SAASC,WAAW,QAAQ,qBAAqB;AA0BjD,MAAMC,YAA2B,GAAG;EAClCC,QAAQ,EAAE,EAAE;EACZC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE;AACT,CAAC;AAED,OAAO,MAAMC,aAAa,GAAGR,gBAAgB,CAC3C,uBAAuB,EACvB,OAAOS,CAAC,EAAE;EAAEC;AAAS,CAAC,KAAK;EACzB,MAAMC,KAAK,GAAGR,WAAW,CAACO,QAAQ,CAAC,CAAc,CAAC;EAClD,IAAI,CAACC,KAAK,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA,MAAMC,QAAQ,GAAI,MAAMX,UAAU,CAACS,KAAK,CAAgB;EACxD,OAAOE,QAAQ,CAAC,CAAC;AACnB,CACF,CAAC;AAGD,MAAMC,YAAY,GAAGb,WAAW,CAAC;EAC/Bc,IAAI,EAAE,SAAS;EACfX,YAAY;EACZY,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACX,aAAa,CAACY,OAAO,EAAGC,KAAK,IAAK;MACzCA,KAAK,CAACf,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDa,OAAO,CAACX,aAAa,CAACc,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAEnDF,KAAK,CAACf,MAAM,GAAG,WAAW;MAC1Be,KAAK,CAAChB,QAAQ,GAAGkB,MAAM,CAACC,OAAO,CAAC,CAAC;IACnC,CAAC,CAAC,CACDL,OAAO,CAACX,aAAa,CAACiB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAClDF,KAAK,CAACf,MAAM,GAAG,QAAQ;MACvBe,KAAK,CAACd,KAAK,GAAGgB,MAAM,CAACC,OAAiB;IACxC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAME,cAAc,GAAIL,KAAgB,IAAKA,KAAK,CAACM,OAAO,CAACtB,QAAQ;AAC1E,OAAO,MAAMuB,oBAAoB,GAAIP,KAAgB,IAAKA,KAAK,CAACM,OAAO,CAACrB,MAAM;AAC9E,OAAO,MAAMuB,mBAAmB,GAAIR,KAAgB,IAAKA,KAAK,CAACM,OAAO,CAACpB,KAAK;AAG5E,eAAeO,YAAY,CAACgB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}