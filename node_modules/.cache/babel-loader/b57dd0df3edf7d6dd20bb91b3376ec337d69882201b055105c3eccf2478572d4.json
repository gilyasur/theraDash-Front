{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { login } from './loginAPI';\nconst initialState = {\n  username: '',\n  password: '',\n  status: 'idle',\n  token: '',\n  logged: false\n};\nexport const loginAsync = createAsyncThunk('login/login', async credentials => {\n  const response = await login(credentials);\n  return response.data;\n});\nexport const loginSlice = createSlice({\n  name: 'login',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(loginAsync.fulfilled, (state, action) => {\n      state.token = action.payload.access;\n      state.logged = true;\n      state.status = 'loading';\n      sessionStorage.setItem('token', JSON.stringify(state.token));\n      console.log(state.token);\n    }).addCase(loginAsync.rejected, (state, action) => {\n      // Assuming you have an API call rejection for expired token scenario\n      if (action.error.message === 'Token expired') {\n        state.token = ''; // Clear the expired token\n        state.logged = false; // Set logged to false\n        state.status = 'idle';\n        sessionStorage.removeItem('token'); // Remove the token from sessionStorage\n      }\n    });\n  }\n});\nexport const selectstatus = state => state.login.status;\nexport const selectLogged = state => state.login.logged;\nexport const selectToken = state => state.login.token;\nexport default loginSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","login","initialState","username","password","status","token","logged","loginAsync","credentials","response","data","loginSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","access","sessionStorage","setItem","JSON","stringify","console","log","rejected","error","message","removeItem","selectstatus","selectLogged","selectToken","reducer"],"sources":["/Users/gilyasur/Documents/My Projects/dashBoard /Front/my-app/src/features/login/loginSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport { login } from './loginAPI';\n\n\nexport interface loginState {\n  username: string;\n  password:string\n  status: 'idle' | 'loading' | 'failed';\n  token:string\n  logged:boolean\n}\n\nconst initialState: loginState = {\n    username: '',\n    password: '',\n    status: 'idle',\n    token: '',\n    logged: false\n};\n\nexport const loginAsync = createAsyncThunk(\n  'login/login',\n  async (credentials: { username: string; password: string }) => {\n    const response = await login(credentials);\n    \n    return response.data;\n  }\n);\n\nexport const loginSlice = createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    \n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(loginAsync.fulfilled, (state,action) => {\n        state.token=action.payload.access\n        state.logged=true\n        state.status = 'loading';\n        sessionStorage.setItem('token', JSON.stringify(state.token));\n        console.log(state.token);\n        \n    })\n    .addCase(loginAsync.rejected, (state, action) => {\n        // Assuming you have an API call rejection for expired token scenario\n        if (action.error.message === 'Token expired') {\n          state.token = ''; // Clear the expired token\n          state.logged = false; // Set logged to false\n          state.status = 'idle';\n          sessionStorage.removeItem('token'); // Remove the token from sessionStorage\n        }\n      });\n  },\n});\n\n\nexport const selectstatus = (state: RootState) => state.login.status;\nexport const selectLogged = (state: RootState) => state.login.logged;\nexport const selectToken = (state: RootState) => state.login.token;\nexport default loginSlice.reducer;"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAEhE,SAASC,KAAK,QAAQ,YAAY;AAWlC,MAAMC,YAAwB,GAAG;EAC7BC,QAAQ,EAAE,EAAE;EACZC,QAAQ,EAAE,EAAE;EACZC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE;AACZ,CAAC;AAED,OAAO,MAAMC,UAAU,GAAGT,gBAAgB,CACxC,aAAa,EACb,MAAOU,WAAmD,IAAK;EAC7D,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACQ,WAAW,CAAC;EAEzC,OAAOC,QAAQ,CAACC,IAAI;AACtB,CACF,CAAC;AAED,OAAO,MAAMC,UAAU,GAAGZ,WAAW,CAAC;EACpCa,IAAI,EAAE,OAAO;EACbX,YAAY;EACZY,QAAQ,EAAE,CAEV,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACT,UAAU,CAACU,SAAS,EAAE,CAACC,KAAK,EAACC,MAAM,KAAK;MAC/CD,KAAK,CAACb,KAAK,GAACc,MAAM,CAACC,OAAO,CAACC,MAAM;MACjCH,KAAK,CAACZ,MAAM,GAAC,IAAI;MACjBY,KAAK,CAACd,MAAM,GAAG,SAAS;MACxBkB,cAAc,CAACC,OAAO,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACP,KAAK,CAACb,KAAK,CAAC,CAAC;MAC5DqB,OAAO,CAACC,GAAG,CAACT,KAAK,CAACb,KAAK,CAAC;IAE5B,CAAC,CAAC,CACDW,OAAO,CAACT,UAAU,CAACqB,QAAQ,EAAE,CAACV,KAAK,EAAEC,MAAM,KAAK;MAC7C;MACA,IAAIA,MAAM,CAACU,KAAK,CAACC,OAAO,KAAK,eAAe,EAAE;QAC5CZ,KAAK,CAACb,KAAK,GAAG,EAAE,CAAC,CAAC;QAClBa,KAAK,CAACZ,MAAM,GAAG,KAAK,CAAC,CAAC;QACtBY,KAAK,CAACd,MAAM,GAAG,MAAM;QACrBkB,cAAc,CAACS,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;MACtC;IACF,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAGF,OAAO,MAAMC,YAAY,GAAId,KAAgB,IAAKA,KAAK,CAAClB,KAAK,CAACI,MAAM;AACpE,OAAO,MAAM6B,YAAY,GAAIf,KAAgB,IAAKA,KAAK,CAAClB,KAAK,CAACM,MAAM;AACpE,OAAO,MAAM4B,WAAW,GAAIhB,KAAgB,IAAKA,KAAK,CAAClB,KAAK,CAACK,KAAK;AAClE,eAAeM,UAAU,CAACwB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}