{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport getAppointments from './appointmentAPI ';\nconst initialState = {\n  appointments: [],\n  status: 'idle',\n  error: null\n};\n\n// const token = sessionStorage.getItem('token');\n\nexport const fetchAppointments = createAsyncThunk(\"appointments/fetchAppointments\", async (_, {\n  getState\n}) => {\n  const token = selectToken(getStat());\n  if (!token) {\n    throw new Error(\"Token not found\");\n  }\n  const response = await getAppointments(token);\n  return response.data;\n});\nconst appointmentsSlice = createSlice({\n  name: 'appointments',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchAppointments.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchAppointments.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.appointments = action.payload;\n    }).addCase(fetchAppointments.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    });\n  }\n});\nexport const selectAppointments = state => state.appointment.appointments;\nexport const selectAppointmentsStatus = state => state.appointment.status;\nexport const selectAppointmentsError = state => state.appointment.error;\nexport default appointmentsSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","getAppointments","initialState","appointments","status","error","fetchAppointments","_","getState","token","selectToken","getStat","Error","response","data","appointmentsSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","selectAppointments","appointment","selectAppointmentsStatus","selectAppointmentsError","reducer"],"sources":["/Users/gilyasur/Documents/My Projects/dashBoard /Front/my-app/src/features/Appointment/appointmentSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { RootState, getState } from '../../app/store';\nimport getAppointments from './appointmentAPI ';\n\n\n\ninterface Appointment {\n  therapist: {\n    username: string;\n  };\n  patient: {\n    name: string;\n  };\n  recurring_frequency: string;\n  day_of_week?: string | null;\n  time_of_day: string;\n  location?: string | null;\n  notes?: string | null;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface AppointmentState {\n  appointments: Appointment[];\n  status: 'idle' | 'loading' | 'succeeded' | 'failed';\n  error: string | null;\n}\n\nconst initialState: AppointmentState = {\n  appointments: [],\n  status: 'idle',\n  error: null,\n};\n\n\n// const token = sessionStorage.getItem('token');\n\nexport const fetchAppointments = createAsyncThunk<Appointment[], void>(\n  \"appointments/fetchAppointments\",\n  async (_, { getState }) => {\n    const token = selectToken(getStat() as RootState);\n    if (!token) {\n      throw new Error(\"Token not found\");\n    }\n\n    const response = (await getAppointments(token)) as { data: Appointment[] };\n    return response.data;\n  }\n);\n\n\nconst appointmentsSlice = createSlice({\n  name: 'appointments',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchAppointments.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchAppointments.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.appointments = action.payload;\n      })\n      .addCase(fetchAppointments.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload as string;\n      });\n  },\n});\n\nexport const selectAppointments = (state: RootState) => state.appointment.appointments;\nexport const selectAppointmentsStatus = (state: RootState) => state.appointment.status;\nexport const selectAppointmentsError = (state: RootState) => state.appointment.error;\n\n\nexport default appointmentsSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAEhE,OAAOC,eAAe,MAAM,mBAAmB;AA0B/C,MAAMC,YAA8B,GAAG;EACrCC,YAAY,EAAE,EAAE;EAChBC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE;AACT,CAAC;;AAGD;;AAEA,OAAO,MAAMC,iBAAiB,GAAGP,gBAAgB,CAC/C,gCAAgC,EAChC,OAAOQ,CAAC,EAAE;EAAEC;AAAS,CAAC,KAAK;EACzB,MAAMC,KAAK,GAAGC,WAAW,CAACC,OAAO,CAAC,CAAc,CAAC;EACjD,IAAI,CAACF,KAAK,EAAE;IACV,MAAM,IAAIG,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA,MAAMC,QAAQ,GAAI,MAAMZ,eAAe,CAACQ,KAAK,CAA6B;EAC1E,OAAOI,QAAQ,CAACC,IAAI;AACtB,CACF,CAAC;AAGD,MAAMC,iBAAiB,GAAGf,WAAW,CAAC;EACpCgB,IAAI,EAAE,cAAc;EACpBd,YAAY;EACZe,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACd,iBAAiB,CAACe,OAAO,EAAGC,KAAK,IAAK;MAC7CA,KAAK,CAAClB,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDgB,OAAO,CAACd,iBAAiB,CAACiB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACvDF,KAAK,CAAClB,MAAM,GAAG,WAAW;MAC1BkB,KAAK,CAACnB,YAAY,GAAGqB,MAAM,CAACC,OAAO;IACrC,CAAC,CAAC,CACDL,OAAO,CAACd,iBAAiB,CAACoB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACtDF,KAAK,CAAClB,MAAM,GAAG,QAAQ;MACvBkB,KAAK,CAACjB,KAAK,GAAGmB,MAAM,CAACC,OAAiB;IACxC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAME,kBAAkB,GAAIL,KAAgB,IAAKA,KAAK,CAACM,WAAW,CAACzB,YAAY;AACtF,OAAO,MAAM0B,wBAAwB,GAAIP,KAAgB,IAAKA,KAAK,CAACM,WAAW,CAACxB,MAAM;AACtF,OAAO,MAAM0B,uBAAuB,GAAIR,KAAgB,IAAKA,KAAK,CAACM,WAAW,CAACvB,KAAK;AAGpF,eAAeU,iBAAiB,CAACgB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}