{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { login } from './loginAPI';\nimport jwt_decode from \"jwt-decode\";\nconst initialState = {\n  username: '',\n  password: '',\n  status: 'idle',\n  token: '',\n  logged: false,\n  // Initialize additional fields\n  firstName: undefined,\n  lastName: undefined\n};\nconst token = \"eyJ0eXAiO.../// jwt token\";\nconst decoded = jwt_decode(token);\nconsole.log(decoded);\nexport const loginAsync = createAsyncThunk('login/login', async credentials => {\n  const response = await login(credentials);\n  return response.data;\n});\nexport const loginSlice = createSlice({\n  name: 'login',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(loginAsync.fulfilled, (state, action) => {\n      // Assuming your server response includes custom claims like 'first_name' and 'last_name'\n      state.token = action.payload.access;\n      state.logged = true;\n      state.status = 'loading';\n      state.firstName = action.payload.first_name;\n      state.lastName = action.payload.last_name;\n\n      // Store the token and additional data in sessionStorage\n      sessionStorage.setItem('token', JSON.stringify(state.token));\n      sessionStorage.setItem('firstName', JSON.stringify(state.firstName));\n      sessionStorage.setItem('lastName', JSON.stringify(state.lastName));\n    }).addCase(loginAsync.rejected, (state, action) => {\n      // Assuming you have an API call rejection for an expired token scenario\n      if (action.error.message === 'Token expired') {\n        state.token = ''; // Clear the expired token\n        state.logged = false; // Set logged to false\n        state.status = 'idle';\n        state.firstName = undefined; // Clear the additional data\n        state.lastName = undefined;\n        sessionStorage.removeItem('token'); // Remove the token from sessionStorage\n        sessionStorage.removeItem('firstName');\n        sessionStorage.removeItem('lastName');\n      }\n    });\n  }\n});\nexport const selectstatus = state => state.login.status;\nexport const selectLogged = state => state.login.logged;\nexport const selectToken = state => state.login.token;\nexport const selectFirstName = state => state.login.firstName;\nexport const selectLastName = state => state.login.lastName;\nexport default loginSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","login","jwt_decode","initialState","username","password","status","token","logged","firstName","undefined","lastName","decoded","console","log","loginAsync","credentials","response","data","loginSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","access","first_name","last_name","sessionStorage","setItem","JSON","stringify","rejected","error","message","removeItem","selectstatus","selectLogged","selectToken","selectFirstName","selectLastName","reducer"],"sources":["/Users/gilyasur/Documents/My Projects/dashBoard /Front/my-app/src/features/login/loginSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport { login } from './loginAPI';\nimport jwt_decode from \"jwt-decode\";\n\n\nexport interface loginState {\n  username: string;\n  password: string;\n  status: 'idle' | 'loading' | 'failed';\n  token: string;\n  logged: boolean;\n  // Add additional fields for custom claims\n  firstName?: string;\n  lastName?: string;\n}\n\nconst initialState: loginState = {\n  username: '',\n  password: '',\n  status: 'idle',\n  token: '',\n  logged: false,\n  // Initialize additional fields\n  firstName: undefined,\n  lastName: undefined,\n};\n\nconst token = \"eyJ0eXAiO.../// jwt token\";\nconst decoded = jwt_decode(token);\nconsole.log(decoded)\n\nexport const loginAsync = createAsyncThunk(\n  'login/login',\n  async (credentials: { username: string; password: string }) => {\n    const response = await login(credentials);\n    return response.data;\n  }\n);\n\nexport const loginSlice = createSlice({\n  name: 'login',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(loginAsync.fulfilled, (state, action) => {\n        // Assuming your server response includes custom claims like 'first_name' and 'last_name'\n        state.token = action.payload.access;\n        state.logged = true;\n        state.status = 'loading';\n        state.firstName = action.payload.first_name;\n        state.lastName = action.payload.last_name;\n        \n\n        // Store the token and additional data in sessionStorage\n        sessionStorage.setItem('token', JSON.stringify(state.token));\n        sessionStorage.setItem('firstName', JSON.stringify(state.firstName));\n        sessionStorage.setItem('lastName', JSON.stringify(state.lastName));\n      })\n      .addCase(loginAsync.rejected, (state, action) => {\n        // Assuming you have an API call rejection for an expired token scenario\n        if (action.error.message === 'Token expired') {\n          state.token = ''; // Clear the expired token\n          state.logged = false; // Set logged to false\n          state.status = 'idle';\n          state.firstName = undefined; // Clear the additional data\n          state.lastName = undefined;\n          sessionStorage.removeItem('token'); // Remove the token from sessionStorage\n          sessionStorage.removeItem('firstName');\n          sessionStorage.removeItem('lastName');\n        }\n      });\n  },\n});\n\nexport const selectstatus = (state: RootState) => state.login.status;\nexport const selectLogged = (state: RootState) => state.login.logged;\nexport const selectToken = (state: RootState) => state.login.token;\nexport const selectFirstName = (state: RootState) => state.login.firstName;\nexport const selectLastName = (state: RootState) => state.login.lastName;\n\nexport default loginSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}